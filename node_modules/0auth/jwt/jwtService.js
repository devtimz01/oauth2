const { base64urlDecode, base64urlUnescape } = require("./utils.js");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");

module.exports = decodeJWT;

function decodeJWT(token) {
  const [headerSeg, payloadSeg, signatureSeg] = token.split(".");
  const payload = JSON.parse(base64urlDecode(payloadSeg));

  const signingInput = [headerSeg, payloadSeg].join(".");
  if (!verifyJWT(signingInput, signatureSeg)) {
    throw new Error("Signature verification failed");
  }

  // exp claim are in seconds (RFC)
  if (payload.exp && Date.now() > payload.exp * 1000) {
    throw new Error("Token expired");
  }

  return payload;
}

function verifyJWT(input, signature) {
  const key = fs.readFileSync(path.resolve(__dirname, "./jwtRS256.key.pub"));
  return crypto
    .createVerify("RSA-SHA256")
    .update(input)
    .verify(key, base64urlUnescape(signature), "base64");
}
